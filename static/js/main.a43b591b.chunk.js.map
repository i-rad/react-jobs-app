{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","error","setError","isLoaded","setIsLoaded","items","setItems","search","setSearch","itemsList","setItemsList","useStyles","makeStyles","theme","root","padding","fullHeightCard","height","button","margin","useEffect","requestOptions","method","headers","body","JSON","stringify","fetch","then","res","json","result","jobsArray","jobs","slice","handleSearchByCompanyNameClick","useCallback","words","split","list","filter","item","some","word","companyName","includes","handleLast7DaysClick","moment","OBJpostingDate","isAfter","add","handleResetFiltersClick","classes","message","className","Grid","container","spacing","xs","sm","align","Button","variant","color","onClick","TextField","value","id","label","onChange","e","target","direction","wrap","map","Card","CardActionArea","CardContent","Typography","gutterBottom","component","jobTitle","shortDesc","alignItems","justify","style","minHeight","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","hydrate","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a43b591b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState, useCallback } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport moment from 'moment'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  // Since only the original 10 jobs need to be filtered this variable stores the initial fetch\n  // otherwise new jobs would be fetched every time and there would be no need for this variable\n  // initial jobs list which will change state on button clicks\n  const [itemsList, setItemsList] = useState([]);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      padding: '10px',\n    },\n    fullHeightCard: {\n      height: \"100%\",\n    },\n    button: {\n      margin: \"0px 5px 10px 0px\",\n    },\n  }));\n\n  // Because of the empty array []\n  // this useEffect will run once\n  useEffect(() => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(\n          { \"companySkills\": true,\n            \"dismissedListingHashes\": [],\n            \"fetchJobDesc\": true,\n            \"jobTitle\": \"Business Analyst\",\n            \"locations\": [],\n            \"numJobs\": 20,\n            \"previousListingHashes\": [] })\n    };\n    fetch(\"https://www.zippia.com/api/jobs/\", requestOptions)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const jobsArray = result.jobs.slice(0, 10)\n          setIsLoaded(true);\n          setItems(jobsArray);\n          setItemsList(jobsArray);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n  // function for changing the state of items according to search terms\n  const handleSearchByCompanyNameClick = useCallback(() => {\n        var words = search.split(\" \");\n        const list = itemsList.filter(item => words.some(word => item.companyName.includes(word)));\n        setItems(list);\n  });\n\n  // function for changing the state of items according to date\n  const handleLast7DaysClick = useCallback(() => {\n        const list = itemsList.filter(item => moment(item.OBJpostingDate, 'YYYY-MM-DDTHH:mm:ss.SSSZ').isAfter(moment().add(-7, 'days')));\n        setItems(list);\n  });\n\n  // reset to inital items list (10)\n  const handleResetFiltersClick = useCallback(() => {\n        setSearch(\"\");\n        setItems(itemsList);\n  });\n\n  const classes = useStyles();\n\n  // checking for errors, if there are none check if fetch finished otherwise return loader\n  if (error) {\n   return <div>Error: {error.message}</div>;\n } else if (!isLoaded) {\n   return (\n          <Grid\n              container\n              spacing={0}\n              direction=\"column\"\n              alignItems=\"center\"\n              justify=\"center\"\n              style={{ minHeight: '100vh' }}\n            >\n\n              <Grid item xs={3}>\n                <CircularProgress />\n              </Grid>\n\n          </Grid>\n  );\n } else {\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n              <Grid item xs={12} sm={4} align=\"center\">\n                <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={handleSearchByCompanyNameClick}>\n                  Search by company name\n                </Button>\n                <br />\n                <TextField value={search} className={classes.button} id=\"outlined-basic\" label=\"Company Name\" variant=\"outlined\" onChange={e => setSearch(e.target.value)} />\n              </Grid>\n              <Grid item xs={12} sm={4} align=\"center\">\n                <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={handleLast7DaysClick}>\n                  Show from last 7 days\n                </Button>\n              </Grid>\n              <Grid item xs={12} sm={4} align=\"center\">\n                <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={handleResetFiltersClick}>\n                  Reset filters\n                </Button>\n              </Grid>\n          </Grid>\n          <br />\n          <Grid container direction=\"column\" wrap=\"nowrap\" spacing={2}>\n              {items.map(item =>\n                <Grid item xs>\n                    <Card className={classes.fullHeightCard}>\n                      <CardActionArea>\n                        <CardContent>\n                          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {item.jobTitle}\n                          </Typography>\n                          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            {item.companyName}\n                          </Typography>\n                          <Typography variant=\"body2\" component=\"p\">\n                            {item.shortDesc}\n                          </Typography>\n                        </CardContent>\n                      </CardActionArea>\n                    </Card>\n                </Grid>\n              )}\n          </Grid>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// changed to hydrate because of server side rendering\nReactDOM.hydrate(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}